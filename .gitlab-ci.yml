image: docker:latest

variables:
  CONTAINER_NGINX_IMAGE: $CI_REGISTRY_IMAGE:nginx-$CI_PIPELINE_ID
  CONTAINER_NGINX_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:nginx-latest
  CONTAINER_PHPFPM_IMAGE: $CI_REGISTRY_IMAGE:phpfpm-$CI_PIPELINE_ID
  CONTAINER_PHPFPM_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:phpfpm-latest
  COMPOSER_CACHE_DIR: /cache
  DOCKER_DRIVER: overlay

stages:
- meld
- composer
- build
- test
- release
- deploy

services:
- docker:dind

before_script:
  - echo "Registering with token $CI_BUILD_TOKEN" 
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com

meld:
  stage: meld 
  image: alpine 
  before_script:
  - echo "Pulling in latest front end build to the project."
  script: 
  - wget "https://gitlab.com/api/v4/projects/$FRONTEND_GITLAB_PROJECT_ID/jobs/artifacts/master/download?job=build&private_token=$FRONTEND_GITLAB_TOKEN" -O frontend-build.zip
  artifacts:
    paths:
      - frontend-build.zip

composer:
  stage: composer
  before_script:
  - echo "Building PHP dependencies"
  image: composer
  script:
  - composer install
  dependencies:
  - meld
  artifacts:
    paths:
    - vendor
    - bootstrap/cache
    - bootstrap/autoload.php
    - composer.lock

build:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
  # First we build using an image we will have to download anyway
  - docker --version
  - tar -xzf frontend-build.tgz && mv dist/static public && rm -f resources/views/welcome.blade.php && mv dist/index.html resources/views/welcome.blade.php
  - chown -R 33 storage/logs bootstrap/cache
  - docker build -f infrastructure/containers/nginx/Dockerfile -t $CONTAINER_NGINX_IMAGE .
  - docker build -f infrastructure/containers/phpfpm/Dockerfile -t $CONTAINER_PHPFPM_IMAGE .
  - docker push $CONTAINER_NGINX_IMAGE
  - docker push $CONTAINER_PHPFPM_IMAGE
  dependencies:
  - meld
  - composer

test:
  stage: test
  script:
  - docker run --entrypoint php $CONTAINER_PHPFPM_IMAGE vendor/phpunit/phpunit/phpunit
  #- docker run --entrypoint vendor/behat/behat/bin/behat $CONTAINER_ARTISAN_IMAGE
  dependencies: []

release:
  stage: release
  script:
  # NGINX
  - docker pull $CONTAINER_NGINX_IMAGE
  - docker tag $CONTAINER_NGINX_IMAGE $CONTAINER_NGINX_RELEASE_IMAGE
  - docker push $CONTAINER_NGINX_RELEASE_IMAGE
  - docker tag $CONTAINER_NGINX_RELEASE_IMAGE $DOCKER_HUB_IMAGE:nginx-$CI_PIPELINE_ID
  #- docker tag $CONTAINER_NGINX_RELEASE_IMAGE $GCP_ECR_URI:nginx-$CI_PIPELINE_ID
  # PHPFPM
  - docker pull $CONTAINER_PHPFPM_IMAGE
  - docker tag $CONTAINER_PHPFPM_IMAGE $CONTAINER_PHPFPM_RELEASE_IMAGE
  - docker push $CONTAINER_PHPFPM_RELEASE_IMAGE
  - docker tag $CONTAINER_PHPFPM_RELEASE_IMAGE $DOCKER_HUB_IMAGE:phpfpm-$CI_PIPELINE_ID
  #- docker tag $CONTAINER_PHPFPM_RELEASE_IMAGE $GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  - docker login -p "$DOCKER_HUB_PASSWORD" $DOCKER_HUB_REGISTRY --username $DOCKER_HUB_USER
  - docker push $DOCKER_HUB_IMAGE:nginx-$CI_PIPELINE_ID
  - docker push $DOCKER_HUB_IMAGE:phpfpm-$CI_PIPELINE_ID
  #- eval "$(echo $(docker run -t -e GCP_ACCESS_KEY_ID=$GCP_ACCESS_KEY_ID -e GCP_SECRET_ACCESS_KEY=$GCP_SECRET_ACCESS_KEY -e GCP_DEFAULT_REGION=$GCP_DEFAULT_REGION garland/aws-cli-docker aws ecr get-login) | sed 's/\r$//' | sed 's/-e \S*//g')"
  #- docker push $GCP_ECR_URI:nginx-$CI_PIPELINE_ID
  #- docker push $GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  only:
  - master
  - development
  dependencies: []

# WARNING: Prefer using --context=$CI_PROJECT_ID else concurrent builds may fail.
deploy_dev:
  image: google/cloud-sdk:162.0.0
  before_script:
  - kubectl config set-cluster "$CI_PROJECT_ID" --server="$KUBE_URL" --certificate-authority="$KUBE_CA_PEM_FILE"
  - kubectl config set-credentials "$CI_PROJECT_ID" --token="$KUBE_TOKEN"
  - kubectl config set-context "$CI_PROJECT_ID" --cluster="$CI_PROJECT_ID" --user="$CI_PROJECT_ID" --namespace="$KUBE_NAMESPACE"
  - kubectl config use-context "$CI_PROJECT_ID"
  stage: deploy
  script:
  script:
  #- 'kubectl patch cronjob.v2alpha1.batch $CI_ENVIRONMENT_SLUG-laravel-phpfpm-worker -p "{ \"spec\": { \"jobTemplate\": { \"spec\": { \"template\": { \"spec\": { \"containers\": [ { \"name\": \"laravel-phpfpm-scheduler\", \"image\": \"$GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID\" } ] } } } } } }"'
  #- kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm-worker laravel-phpfpm-worker=$GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  #- kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm-worker laravel-phpfpm-subscriber=$GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-nginx nginx=$GCP_ECR_URI:nginx-$CI_PIPELINE_ID
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm laravel-phpfpm=$GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  environment:
    name: ltl-buckram-dev
    url: http://$CI_ENVIRONMENT_SLUG.$CI_TARGET_DOMAIN
  only:
  - master
  dependencies: []
