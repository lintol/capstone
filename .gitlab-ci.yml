image: docker:latest

variables:
  CONTAINER_NGINX_IMAGE: $CI_REGISTRY_IMAGE:nginx-$CI_PIPELINE_ID
  CONTAINER_NGINX_RELEASE_IMAGE: $GCP_ECR_URI:nginx-latest
  CONTAINER_PHPFPM_IMAGE: $CI_REGISTRY_IMAGE:phpfpm-$CI_PIPELINE_ID
  CONTAINER_PHPFPM_RELEASE_IMAGE: $GCP_ECR_URI:phpfpm-latest
  COMPOSER_CACHE_DIR: /cache
  DOCKER_DRIVER: overlay

stages:
- composer
- build
- test
- release
- deploy

services:
- docker:dind

before_script:
  - echo "Registering with token $CI_BUILD_TOKEN" 
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com

composer:
  stage: composer
  before_script:
  - echo "Building PHP dependencies"
  image: composer
  script:
  - composer install
  artifacts:
    paths:
    - vendor
    - bootstrap/cache
    - bootstrap/autoload.php
    - composer.lock

build:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
  # First we build using an image we will have to download anyway
  - wget "https://mo.ev.openindustry.in/ltl-lintol-dev/cdn/dist-$(wget https://mo.ev.openindustry.in/ltl-lintol-dev/cdn/latest-commit -O - -q)/index.html" -O resources/views/index.blade.php
  - sed -i "s/COMMIT/dist-$(wget https://mo.ev.openindustry.in/ltl-lintol-dev/cdn/latest-commit -O - -q)/g" resources/views/index.blade.php
  - chown -R 33 storage/logs bootstrap/cache
  - docker build -f infrastructure/containers/nginx/Dockerfile -t $CONTAINER_NGINX_IMAGE .
  - docker build -f infrastructure/containers/phpfpm/Dockerfile -t $CONTAINER_PHPFPM_IMAGE .
  - docker push $CONTAINER_NGINX_IMAGE
  - docker push $CONTAINER_PHPFPM_IMAGE
  dependencies:
  - composer

test:
  stage: test
  script:
  - docker run --entrypoint php $CONTAINER_PHPFPM_IMAGE vendor/phpunit/phpunit/phpunit
  #- docker run --entrypoint vendor/behat/behat/bin/behat $CONTAINER_ARTISAN_IMAGE
  dependencies: []

release:
  stage: release
  script:
  # NGINX
  - docker pull $CONTAINER_NGINX_IMAGE
  - docker tag $CONTAINER_NGINX_IMAGE $CONTAINER_NGINX_RELEASE_IMAGE
  - docker tag $CONTAINER_NGINX_RELEASE_IMAGE $GCP_ECR_URI:nginx-$CI_PIPELINE_ID
  # PHPFPM
  - docker pull $CONTAINER_PHPFPM_IMAGE
  - docker tag $CONTAINER_PHPFPM_IMAGE $CONTAINER_PHPFPM_RELEASE_IMAGE
  - docker tag $CONTAINER_PHPFPM_RELEASE_IMAGE $GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  # Login to GCP container Registry
  - docker login -u _json_key -p "$(echo $GCP_KEY_JSON)" $GCP_ECR_URI
  # Push release versions to repository.
  - docker push $CONTAINER_NGINX_RELEASE_IMAGE
  - docker push $GCP_ECR_URI:nginx-$CI_PIPELINE_ID
  - docker push $CONTAINER_PHPFPM_RELEASE_IMAGE
  - docker push $GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID
  only:
  - master
  - development
  dependencies: []

# WARNING: Prefer using --context=$CI_PROJECT_ID else concurrent builds may fail.
deploy_dev:
  image: google/cloud-sdk:162.0.0
  before_script:
  # In gitlab operation -> kubernetes needs to be setup for this to work so you get the KUBE variables
  - kubectl config set-cluster "$CI_PROJECT_ID" --server="$KUBE_URL" --certificate-authority="$KUBE_CA_PEM_FILE"
  - kubectl config set-credentials "$CI_PROJECT_ID" --token="$KUBE_TOKEN"
  - kubectl config set-context "$CI_PROJECT_ID" --cluster="$CI_PROJECT_ID" --user="$CI_PROJECT_ID" --namespace="$KUBE_NAMESPACE"
  - kubectl config use-context "$CI_PROJECT_ID"
  stage: deploy
  script:
  script:
  - echo $CI_ENVIRONMENT_SLUG
  #- 'kubectl patch cronjob.v2alpha1.batch $CI_ENVIRONMENT_SLUG-laravel-phpfpm-worker -p "{ \"spec\": { \"jobTemplate\": { \"spec\": { \"template\": { \"spec\": { \"containers\": [ { \"name\": \"laravel-phpfpm-scheduler\", \"image\": \"$GCP_ECR_URI:phpfpm-$CI_PIPELINE_ID\" } ] } } } } } }"'
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm-worker laravel-phpfpm-worker=$CONTAINER_PHPFPM_IMAGE
  #- kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm-worker laravel-phpfpm-subscriber=$CONTAINER_PHPFPM_IMAGE
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-nginx nginx=$CONTAINER_NGINX_IMAGE
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm laravel-phpfpm=$CONTAINER_PHPFPM_IMAGE
  environment:
    name: ltl-buckram-dev
    url: http://$CI_ENVIRONMENT_SLUG.$CI_TARGET_DOMAIN
  only:
  - master
  dependencies: []
